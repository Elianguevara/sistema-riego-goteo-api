spring.application.name=sistema-riego-goteo-api

# ===================================================================
# Configuracion del Servidor
# ===================================================================
server.port=8080
# server.servlet.context-path=/api # Opcional: si quieres un prefijo para toda la API

# ===================================================================
# Configuracion de la Base de Datos (MySQL)
# ===================================================================
# Credenciales y nombre de base de datos
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/sistema_riego?useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=chack689
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ===================================================================
# Configuracion de JPA e Hibernate
# ===================================================================
# Dialecto para MySQL 8+
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# hibernate.ddl-auto:
#   validate: valida el esquema, no hace cambios.
#   update: actualiza el esquema si es necesario.
#   create: crea el esquema, destruyendo datos previos.
#   create-drop: crea el esquema al inicio, lo elimina al final. (Útil para tests)
#   none: no hace nada. (Recomendado para producción gestionando el esquema manualmente o con Flyway/Liquibase)
spring.jpa.hibernate.ddl-auto=update 
# 'update' es conveniente para desarrollo, considera 'validate' o 'none' para producción

# Mostrar SQL generado por Hibernate (útil para debug)
spring.jpa.show-sql=true

# Formatear el SQL mostrado (útil para debug)
spring.jpa.properties.hibernate.format_sql=true

# ===================================================================
# Configuracion de JWT (JSON Web Token)
# ===================================================================
# ¡IMPORTANTE! Usa una clave secreta fuerte y guárdala de forma segura (ej. variable de entorno) en producción.
# Puedes generar una clave segura online o con herramientas. Debe ser suficientemente larga.
# Custom JWT secret property
jwt.secret=d1UZcMxQ/1rHinnQ2jnSeyrXaM12fS4d5Cw/lZJnFfHD7bItRtB9XjghV5ju4XYV86ZKEiwy9A4vIqH0LBnDPg==

# Tiempo de expiración del token en milisegundos
# Ejemplo: 86400000 ms = 24 horas
# Ejemplo: 3600000 ms = 1 horas
# Ejemplo: 7200000 ms = 2 horas
# Ejemplo: 10800000 ms = 3 horas
# Ejemplo: 1800000 ms = 30 minutos
# Ejemplo: 60000 ms = 1 minuto
# Tiempo de expiración del token en milisegundos (definido como propiedad personalizada)
jwt.expiration=3600000

# ===================================================================
# Configuracion de Logging (Opcional)
# ===================================================================
# logging.level.org.springframework=INFO
# logging.level.org.hibernate.SQL=DEBUG # Para ver SQL detallado
# logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE # Para ver parámetros de SQL

